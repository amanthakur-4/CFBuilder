{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","fileName","inputNameList","setInputNameList","stepName","stepParentheses","stepType","inputStepList","setInputStepList","handleInputStepChange","e","index","target","name","value","list","handleAddInput","step","oligoName","oligoSeq","inputOligoList","setInputOligoList","handleInputOligoChange","plasmidName","plasmidSeq","inputPlasmidList","setInputPlasmidList","handleInputPlasmidChange","makeTextFile","finalString","fileTitle","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","className","Navbar","bg","variant","Brand","href","Nav","Link","class","map","item","i","InputGroup","Prepend","Text","FormControl","aria-label","aria-describedby","placeholder","onChange","handleInputNameChange","Button","onClick","splice","handleRemoveInputStep","id","handleRemoveInputOligo","as","handleRemoveInputPlasmid","stepStrings","oligoStrings","plasmidStrings","fileString","length","concatString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2b1d9993.chunk.js","sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useEffect, useState } from 'react';\nimport { Button, FormControl, InputGroup, Navbar, Nav } from 'react-bootstrap';\n\n\nfunction App() {\n\n  const [inputNameList, setInputNameList] = useState([\n    { fileName: \"\" }\n  ]);\n\n  // Function for updating the strings in each object when a change is made to the text inside the \"File name\" input box\n  const handleInputNameChange = (e, index) => {\n    const { name, value } = e.target;\n    const list = [...inputNameList];\n    list[index][name] = value;\n    setInputNameList(list);\n  };\n\n  // Instantiation of the object list that houses all inputs from the \"File name\" input field\n  const [inputStepList, setInputStepList] = useState([\n    { stepName: \"\", stepParentheses: \"\", stepType: \"PCR\" }\n  ]);\n\n  // Function for updating the strings in each object when a change is made to the text inside the \"Manipulations\" input boxes\n  const handleInputStepChange = (e, index) => {\n    const { name, value } = e.target;\n    const list = [...inputStepList];\n    list[index][name] = value;\n    setInputStepList(list);\n  };\n  \n  // Logic for handling the addition of various manipulation input boxes. Each button passes a different\n  // \"step\" id into the function which is then used to determine which type of manipulation should be added\n  const handleAddInput = step => {\n    switch(step) {\n      case 0:\n        setInputStepList([...inputStepList, {stepName: \"\", stepParentheses: \"\", stepType: \"PCR\"}]);\n        break;\n      case 1:\n        setInputStepList([...inputStepList, {stepName: \"\", stepParentheses: \"\", stepType: \"Digest\"}]);\n        break;\n      case 2:\n        setInputStepList([...inputStepList, {stepName: \"\", stepParentheses: \"\", stepType: \"Assemble\"}]);\n        break;\n      case 3:\n        setInputStepList([...inputStepList, {stepName: \"\", stepParentheses: \"\", stepType: \"Transform\"}]);\n        break;\n      default:\n        break;\n    }\n  };\n\n  // Function for removing the selected manipulation input box\n  const handleRemoveInputStep = index => {\n    const list = [...inputStepList];\n    list.splice(index, 1);\n    setInputStepList(list);\n  }\n\n  // Instantiation of the object list that houses all inputs from the \"Oligo\" input fields\n  const [inputOligoList, setInputOligoList] = useState([\n    { oligoName: \"\", oligoSeq: \"\" }\n  ]);\n\n  // Function for updating the strings in each object when a change is made to the text inside the \"Oligos\" input boxes\n  const handleInputOligoChange = (e, index) => {\n    const { name, value } = e.target;\n    const list = [...inputOligoList];\n    list[index][name] = value;\n    setInputOligoList(list);\n  };\n\n  // Function for handling the addition of various oligo input boxes\n  const handleAddInputOligo = () => {\n    setInputOligoList([...inputOligoList, {oligoName: \"\", oligoSeq: \"\"}]);\n  };\n\n  // Function for removing the selected oligo input box\n  const handleRemoveInputOligo = index => {\n    const list = [...inputOligoList];\n    list.splice(index, 1);\n    setInputOligoList(list);\n  }\n\n  // Instantiation of the object list that houses all inputs from the \"Plasmid\" input fields\n  const [inputPlasmidList, setInputPlasmidList] = useState([\n    { plasmidName: \"\", plasmidSeq: \"\" }\n  ]);\n\n  // Function for updating the strings in each object when a change is made to the text inside the \"Plasmid\" input boxes\n  const handleInputPlasmidChange = (e, index) => {\n    const { name, value } = e.target;\n    const list = [...inputPlasmidList];\n    list[index][name] = value;\n    setInputPlasmidList(list);\n  };\n\n  // Function for handling the addition of various plasmid input boxes\n  const handleAddInputPlasmid = () => {\n    setInputPlasmidList([...inputPlasmidList, {plasmidName: \"\", plasmidSeq: \"\"}]);\n  };\n\n  // Function for removing the selected oligo input box\n  const handleRemoveInputPlasmid = index => {\n    const list = [...inputPlasmidList];\n    list.splice(index, 1);\n    setInputPlasmidList(list);\n  }\n\n  // This function takes all the strings enetered into the input boxes and concatenates them into one large string.\n  // It iterates through each list of inputs (inputStepList, inputOligoList, inputPlasmidList -- in this order) and adds the proper\n  // formatting. It then makes a call to 'makeTextFile' and passes along the completed string.\n  const concatString = (stepStrings, oligoStrings, plasmidStrings, fileName) => {\n    var fileString = \"\";\n    if (stepStrings.length > 0) {\n      var temp = \"\";\n      for (let i = 0; i < stepStrings.length; i++) {\n        fileString += stepStrings[i].stepType;\n        fileString += \" \";\n        fileString += stepStrings[i].stepName;\n        fileString += \"\\t\\t\";\n        temp = \"(\" + stepStrings[i].stepParentheses + \")\"; \n        fileString += temp;\n        fileString += \"\\n\";\n      }\n      fileString += \"------------------\";\n      fileString += \"\\n\";\n    }\n\n    if (oligoStrings.length > 0) {\n      for (let i = 0; i < oligoStrings.length; i++) {\n        fileString += \">\";\n        fileString += oligoStrings[i].oligoName;\n        fileString += \"\\n\";\n        fileString += oligoStrings[i].oligoSeq;\n        fileString += \"\\n\";\n      }\n    }\n\n    if (plasmidStrings.length > 0) {\n      for (let i = 0; i < plasmidStrings.length; i++) {\n        fileString += \">\";\n        fileString += plasmidStrings[i].plasmidName;\n        fileString += \"\\n\";\n        fileString += plasmidStrings[i].plasmidSeq;\n        fileString += \"\\n\";\n      }\n    }\n    makeTextFile(fileString, fileName)\n  }\n\n  // This function takes a string and inserts it into a text file, which is then downloaded \n  const makeTextFile = (finalString, fileName) => {\n    var fileTitle = fileName[0].fileName + \".txt\";\n    var element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(finalString));\n    element.setAttribute('download', fileTitle);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <Navbar bg=\"light\" variant=\"light\">\n          <Navbar.Brand href=\"#home\"><h2>Construction File Builder</h2></Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#home\">Golden Gate</Nav.Link>\n            <Nav.Link href=\"#features\">Ortholog Scan</Nav.Link>\n          </Nav>\n        </Navbar>\n      </header>\n      <body>\n        <div class=\"input-group-main\">\n          \n            <p class=\"input-label\">Enter file name:</p>\n            {inputNameList.map((item, i) => {\n                return(\n                  <div class=\"input-container\">\n                    <InputGroup className=\"mb-3\" class=\"input-pcr-step\">\n                      <InputGroup.Prepend>\n                        <InputGroup.Text>File name</InputGroup.Text>\n                      </InputGroup.Prepend>\n                      <FormControl\n                        aria-label=\"Default\"\n                        aria-describedby=\"input-file-name\"\n                        placeholder=\"PConstruction of KanR Basic Part Bca9128\"\n                        name=\"fileName\"\n                        value={item.fileName}\n                        onChange={e => handleInputNameChange(e, i)}\n                      />\n                    </InputGroup>\n                  </div>\n              );\n            })}\n          \n          <p class=\"input-label\">Enter Manipulations:</p>\n          {inputStepList.map((item, i) => {\n            return(\n              <div class=\"input-container\">\n                <InputGroup className=\"mb-3\" class=\"input-pcr-step\">\n                  <InputGroup.Prepend>\n                    <InputGroup.Text>{ item.stepType }</InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl\n                    aria-label=\"Default\"\n                    aria-describedby=\"input-pcr-step-name\"\n                    placeholder=\"PF3a,BR3a on pLYC33K\"\n                    name=\"stepName\"\n                    value={item.stepName}\n                    onChange={e => handleInputStepChange(e, i)}\n                  />\n                  <FormControl\n                    aria-label=\"Default\"\n                    aria-describedby=\"input-pcr-step-parentheses\"\n                    placeholder=\"4739 bp, back1\"\n                    name=\"stepParentheses\"\n                    value={item.stepParentheses}\n                    onChange={e => handleInputStepChange(e, i)}\n                  />\n                  <Button variant=\"outline-danger\" aria-describedby=\"delete-step\" onClick={() => handleRemoveInputStep(i)}>X</Button>{' '}\n                </InputGroup> \n              </div>\n            );\n          })}\n\n          <div class=\"add-step-container\">\n            <Button variant=\"primary\" onClick={e => handleAddInput(0)}>Add PCR</Button>{' '}\n            <Button variant=\"primary\" onClick={e => handleAddInput(1)}>Add Digest</Button>{' '}\n            <Button variant=\"primary\" onClick={e => handleAddInput(2)}>Add Assemble</Button>{' '}\n            <Button variant=\"primary\" onClick={e => handleAddInput(3)}>Add Transform</Button>{' '}\n          </div>\n          \n          <p class=\"input-label\">Enter oligos:</p>\n          {inputOligoList.map((item, i) => {\n            return(\n              <div class=\"input-container\"> \n                  <InputGroup className=\"mb-3\" class=\"input-text-field\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"input-oligo\">Oligo</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <FormControl\n                      aria-label=\"Default\"\n                      aria-describedby=\"input-oligo\"\n                      placeholder=\"oB2F\"\n                      name=\"oligoName\"\n                      value={item.oligoName}\n                      onChange={e => handleInputOligoChange(e, i)}\n                    />\n                    <FormControl\n                      aria-label=\"Default\"\n                      aria-describedby=\"input-oligo\"\n                      placeholder=\"attaccgcctttgagtgagc\"\n                      name=\"oligoSeq\"\n                      value={item.oligoSeq}\n                      onChange={e => handleInputOligoChange(e, i)}\n                    />\n                    <Button variant=\"outline-danger\" aria-describedby=\"delete-oligo\" onClick={() => handleRemoveInputOligo(i)}>X</Button>{' '}\n                  </InputGroup>\n              </div>\n            );\n          })}\n\n          <div class=\"add-step-container\">\n            <Button variant=\"primary\" onClick={e => handleAddInputOligo()}>Add Oligo</Button>{' '}\n          </div>\n\n          <p class=\"input-label\">Enter plasmid template:</p>\n          {inputPlasmidList.map((item, i) => {\n            return(\n              <div class=\"input-container\">\n                <InputGroup className=\"mb-3\" class=\"input-text-field\">\n                  <InputGroup.Prepend>\n                    <InputGroup.Text>Plasmid Template</InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl \n                    as=\"textarea\" \n                    aria-label=\"Plasmid name\" \n                    aria-describedby=\"input-plasmid-name\"\n                    placeholder=\"pLYC18\"\n                    name=\"plasmidName\"\n                    value={item.plasmidName}\n                    onChange={e => handleInputPlasmidChange(e, i)}\n                  />\n                  <FormControl \n                    as=\"textarea\" \n                    aria-label=\"Plasmid sequence\" \n                    aria-describedby=\"input-plasmid-sequence\"\n                    placeholder=\"*Plasmid Sequence*\"\n                    name=\"plasmidSeq\"\n                    value={item.plasmidSeq}\n                    onChange={e => handleInputPlasmidChange(e, i)}\n                  />\n                  <Button variant=\"outline-danger\" aria-describedby=\"delete-plasmid\" onClick={() => handleRemoveInputPlasmid(i)}>X</Button>{' '}\n                </InputGroup>\n              </div>\n            );\n          })}\n\n          <div class=\"add-step-container\">\n            <Button variant=\"primary\" onClick={e => handleAddInputPlasmid()}>Add Plasmid</Button>{' '}\n          </div>\n          \n          <div class=\"create-button\">\n            <Button variant=\"success\" onClick={e => concatString(inputStepList, inputOligoList, inputPlasmidList, inputNameList)}>Create Construction File</Button>{' '}\n          </div>\n        </div>\n\n        {/* The following code is used for debugging purposes to determine what data is being stored in the various arrays */}\n        {/* <pre>\n          {JSON.stringify(inputNameList, null, 2)}\n          {JSON.stringify(inputStepList, null, 2)}\n          {JSON.stringify(inputOligoList, null, 2)}\n          {JSON.stringify(inputPlasmidList, null, 2)}\n        </pre> */}\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}